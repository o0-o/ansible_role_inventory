---
# vim: ts=2:sw=2:sts=2:et:ft=yaml.ansible
#
# Define the byline_var and comment header based on collection or role
# metadata.
#
########################################################################

# The comment header is used for templates to indicate what collection
# or role was used.
- name: Define the default comment header
  ansible.builtin.set_fact:
    default_comment_header: "Generated by the {{ byline_var }}."
  vars:
    collect_meta_file_var: "{{  ansible_parent_role_paths
                                | default( [role_path] )
                                | first
                                | dirname
                                | dirname }}/galaxy.yml"
    collect_meta_var: >-
      {{ lookup('ansible.builtin.file', collect_meta_file_var) | from_yaml }}
    collect_fqcn_var: "{{ [ collect_meta_var['namespace'],
                            collect_meta_var['name'] ]
                          | join('.') }}"
    collect_vers_var: "{{ collect_meta_var['version'] }}"
    collect_line_var: >-
      {{ collect_fqcn_var}} collection (version {{ collect_vers_var }})
    role_line_var: >-
      {{  ansible_parent_role_names
          | default( [ansible_role_name] )
          | first }} role
    byline_var: "{{ ( collect_meta_file_var | fileglob == [] )
                    | ternary(role_line_var, collect_line_var) }}"

# These are defined in defaults/main.yml so that values may be overriden
# in the inventory. However, defaults do not persist across roles when
# the role is included as a dependency in meta/main.yml. As a result,
# they are defined both in defaults/main.yml and here so that they have
# the precedence of defaults and the persistence of vars.
- name: Scope comment prefixes and postfixes for general use
  ansible.builtin.set_fact:
    "{{ comment_item }}": "{{ vars[comment_item] }}"
  loop:
    - default_comment_prefix
    - ansible_comment_prefix
    - yaml_comment_prefix
    - yaml_python_prefix
    - default_comment_postfix
  loop_control:
    loop_var: comment_item
